// Generated by CoffeeScript 1.8.0
(function() {
  "use strict";
  var Listeners, Strings, Words, Xs, _, _emptyObject, _extend, _xs, _xsPath,
    __slice = [].slice;

  if (typeof window !== "undefined" && window !== null) {
    Words = window.Words;
  } else if (typeof module !== "undefined" && module !== null) {
    Words = require('words.js');
  }

  Strings = Words.Strings;

  _ = Words.Types;

  _emptyObject = function(object) {
    var key;
    for (key in object) {
      if (object.hasOwnProperty(key)) {
        return false;
      }
    }
    return true;
  };

  _extend = function(target, source, append) {
    var key, value;
    if (target == null) {
      target = {};
    }
    for (key in source) {
      value = source[key];
      if (_.isObject(value)) {
        _extend(target[key], value, append);
      } else {

      }
      if (!(append && _.isDefined(target[key]))) {
        target[key] = value;
      }
    }
    return target;
  };

  _xs = function(object, callback) {
    var path, result, traverse;
    callback = _.forceFunction(callback, function() {
      return true;
    });
    traverse = function(node) {
      var key, response, responseKey, value;
      for (key in node) {
        value = node[key];
        if (_.notObject(node)) {
          continue;
        }
        path.push(key);
        if (response = callback(key, value, path)) {
          if (_.isObject(response)) {
            if (response.remove === true) {
              delete node[key];
            } else {
              if (_.isDefined(response.value)) {
                value = node[key] = response.value;
                continue;
              }
              if (_.isDefined(response.key) && '' !== (responseKey = _.forceString(response.key))) {
                if (!node.hasOwnProperty(responseKey)) {
                  node[responseKey] = value;
                  delete node[key];
                }
              }
            }
          }
          result.push({
            key: key,
            value: value,
            path: path.join(' ')
          });
          if ((response != null ? response.stop : void 0) === true) {
            return;
          }
        }
        traverse(value);
        path.pop();
      }
    };
    result = [];
    path = [];
    traverse(object);
    return result;
  };

  _xsPath = function(object, path, command) {
    var index, length, nodes, result, target, _i;
    nodes = Strings.oneSpaceAndTrim(_.forceString(path)).split(' ');
    if (nodes[0] === '') {
      return;
    }
    length = nodes.length - 2;
    if (length > -1) {
      for (index = _i = 0; 0 <= length ? _i <= length : _i >= length; index = 0 <= length ? ++_i : --_i) {
        if (void 0 === (object = object[nodes[index]])) {
          return;
        }
      }
    } else {
      index = 0;
    }
    target = nodes[index];
    if (_.isDefined(command) && object.hasOwnProperty(target)) {
      if (command.remove) {
        return delete object[target];
      }
      if (command.key && !object.hasOwnProperty(command.key)) {
        object[command.key] = object[target];
        delete object[target];
        target = command.key;
      }
      if (command.value && object.hasOwnProperty(target)) {
        object[target] = command.value;
      }
    }
    result = object[target];
    return result;
  };

  Xs = (function() {
    Xs.empty = function(object) {
      if (_.notObject(object) || object instanceof Number) {
        return false;
      }
      return _emptyObject(object);
    };

    Xs.extend = function(target, source) {
      return _extend(_.forceObject(target), _.forceObject(source));
    };

    Xs.append = function(target, source) {
      return _extend(_.forceObject(target), _.forceObject(source), true);
    };

    Xs.add = function(object, path, value) {
      var index, node, target, valueIsObject, _i, _len, _ref;
      if (object == null) {
        object = {};
      }
      if (_.isObject(path)) {
        return _extend(object, path, true);
      }
      path = new Words(path);
      valueIsObject = _.isObject(value);
      target = object;
      _ref = path.words;
      for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
        node = _ref[index];
        if (index < (path.count - 1) || valueIsObject) {
          if (target[node] == null) {
            target[node] = {};
          }
        }
        if (index < (path.count - 1)) {
          target = target[node];
        } else if (valueIsObject) {
          _extend(target[node], value, true);
        } else {
          if (target[node] == null) {
            target[node] = value;
          }
        }
      }
      return object;
    };

    Xs.xs = function(object, callback) {
      if (_.notObject(object)) {
        return [];
      }
      return _xs(object, callback);
    };

    Xs.copy = function(object) {
      var traverse;
      if (_.notObject(object)) {
        return {};
      }
      traverse = function(copy, node) {
        var key, value;
        for (key in node) {
          value = node[key];
          if (_.isObject(node)) {
            copy[key] = value;
          } else {
            traverse(value);
          }
        }
        return copy;
      };
      return traverse({}, object);
    };

    Xs.get = function(object, path, commands) {
      if (_.isObject(object)) {
        return _xsPath(object, path, commands);
      }
      return '';
    };

    Xs.getn = function(object, path, replacement) {
      return _.forceNumber(Xs.get(object, path), replacement);
    };

    Xs.gets = function(object, path) {
      return _.forceString(Xs.get(object, path));
    };

    Xs.geta = function(object, path) {
      return _.forceArray(Xs.get(object, path));
    };

    Xs.geto = function(object, path) {
      return _.forceObject(Xs.get(object, path));
    };

    Xs.keys = function(object, path) {
      var key, keys;
      keys = [];
      if (_.isObject(path = Xs.get(object, path))) {
        for (key in path) {
          keys.push(key);
        }
      }
      return keys;
    };

    Xs.values = function(object, path) {
      var key, value, values;
      values = [];
      if (_.isObject(path = Xs.get(object, path))) {
        for (key in path) {
          value = path[key];
          values.push(value);
        }
      }
      return values;
    };

    function Xs(path, value) {
      this.object = {};
      if (path) {
        Xs.add(this.object, path, value);
      }
    }

    Xs.prototype.xs = function(callback) {
      return Xs.xs(this.object, callback);
    };

    Xs.prototype.empty = function() {
      return _emptyObject(this.object);
    };

    Xs.prototype.copy = function() {
      return Xs.copy(this.object);
    };

    Xs.prototype.add = function(path, value) {
      return Xs.add(this.object, path, value);
    };

    Xs.prototype.remove = function(path) {
      return _xsPath(this.object, path, {
        remove: true
      });
    };

    Xs.prototype.removeAll = function(query) {
      if ('' !== (query = Strings.trim(query))) {
        Xs.xs(this.object, function(key) {
          if (key === query) {
            return {
              remove: true
            };
          }
        });
      }
      return this;
    };

    Xs.prototype.set = function(nodePath, value) {
      var key, keys, _i, _len;
      if ('' === (nodePath = _.forceString(nodePath))) {
        return '';
      }
      value = _xsPath(this.object, nodePath, {
        value: value
      });
      if (_.isObject(value)) {
        keys = new Xs(value).search();
        for (_i = 0, _len = keys.length; _i < _len; _i++) {
          key = keys[_i];
          this.triggerListener(nodePath + ' ' + key.path, value);
        }
      } else {
        this.triggerListener(nodePath, value);
      }
      return value;
    };

    Xs.prototype.setAll = function(query, value) {
      var result, _i, _len, _ref;
      if ('' !== (query = Strings.trim(query))) {
        Xs.xs(this.object, function(key) {
          if (key === query) {
            return {
              value: value
            };
          }
        });
        _ref = this.search(query);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          result = _ref[_i];
          this.triggerListener(result.path, value);
        }
      }
      return this;
    };

    Xs.prototype.setKey = function(query, name) {
      return _xsPath(this.object, query, {
        key: name
      });
    };

    Xs.prototype.setAllKeys = function(query, name) {
      if ('' !== (query = Strings.trim(query))) {
        Xs.xs(this.object, function(key) {
          if (key === query) {
            return {
              key: name
            };
          }
        });
      }
      return this;
    };

    Xs.prototype.search = function(query) {
      var predicate, result;
      if (_.isDefined(query)) {
        if ('' === (query = Strings.trim(query))) {
          return [];
        }
      }
      if (query) {
        predicate = function(key) {
          if (key === query) {
            return true;
          }
        };
      } else {
        predicate = function() {
          return true;
        };
      }
      result = this.xs(predicate);
      return result;
    };

    Xs.prototype.list = function(query) {
      var returnValue;
      if ('' === (query = Strings.oneSpaceAndTrim(query))) {
        return [];
      }
      if (query) {
        returnValue = function(path) {
          if (new Words(path.join(' ')).startsWith(query)) {
            return true;
          }
        };
      } else {
        returnValue = function() {
          return true;
        };
      }
      return this.xs(function(k, v, path) {
        return returnValue(path);
      });
    };

    Xs.prototype.get = function(path) {
      if (path === void 0) {
        return this.object;
      }
      return _xsPath(this.object, path);
    };

    Xs.prototype.getn = function(path, replacement) {
      return Xs.getn(this.object, path, replacement);
    };

    Xs.prototype.gets = function(path) {
      return Xs.gets(this.object, path);
    };

    Xs.prototype.geta = function(path) {
      return Xs.geta(this.object, path);
    };

    Xs.prototype.geto = function(path) {
      return Xs.geto(this.object, path);
    };

    Xs.prototype.keys = function(path) {
      var key, keys;
      keys = [];
      if (_.isObject(path = _xsPath(this.object, path))) {
        for (key in path) {
          keys.push(key);
        }
      }
      return keys;
    };

    Xs.prototype.values = function(path) {
      var key, value, values;
      values = [];
      if (_.isObject(path = _xsPath(this.object, path))) {
        for (key in path) {
          value = path[key];
          values.push(value);
        }
      }
      return values;
    };

    Xs.prototype.paths = function(node) {
      var entry, paths, _i, _len, _ref;
      paths = [];
      _ref = this.search(node);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        entry = _ref[_i];
        paths.push(entry.path);
      }
      return paths;
    };

    Xs.prototype.addListener = function(path, callback) {
      if (!this.listeners) {
        this.listeners = new Listeners;
      }
      return this.listeners.add(path, callback);
    };

    Xs.prototype.triggerListener = function(path, data) {
      if (this.listeners) {
        this.listeners.trigger(path, data);
      }
      return this;
    };

    Xs.prototype.removeListener = function() {
      var path, paths, _i, _len;
      paths = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (this.listeners) {
        for (_i = 0, _len = paths.length; _i < _len; _i++) {
          path = paths[_i];
          this.listeners.remove(path);
        }
      }
      return this;
    };

    return Xs;

  })();

  Listeners = (function() {
    Listeners.count = 0;

    Listeners.newName = function() {
      return '' + (++Listeners.count);
    };

    function Listeners(listeners) {
      this.listeners = listeners != null ? listeners : new Xs;
    }

    Listeners.prototype.add = function(path, callback) {
      var listener, name, obj, trigger;
      path = Strings.oneSpaceAndTrim(path);
      name = Listeners.newName();
      if (listener = this.listeners.get(path)) {
        listener[name] = callback;
      } else {
        obj = {};
        obj[name] = callback;
        this.listeners.add(path, obj);
      }
      trigger = this.listeners.get(path);
      return {
        trigger: (function(_this) {
          return function(data) {
            if (data == null) {
              data = '';
            }
            return typeof trigger[name] === "function" ? trigger[name](path, data) : void 0;
          };
        })(this),
        remove: (function(_this) {
          return function() {
            return delete trigger[name];
          };
        })(this)
      };
    };

    Listeners.prototype.trigger = function(path, data) {
      var callback, callbacks, k, listener, listeners, name, node, nodePath, _i, _len;
      if (data == null) {
        data = '';
      }
      path = new Words(path);
      listeners = this.listeners.search('*');
      for (_i = 0, _len = listeners.length; _i < _len; _i++) {
        node = listeners[_i];
        callbacks = node.value;
        nodePath = new Words(node.path).pop().$;
        if (path.startsWith(nodePath)) {
          for (name in callbacks) {
            callback = callbacks[name];
            if (typeof callback === "function") {
              callback(path.$, data);
            }
          }
        }
      }
      listeners = this.listeners.get(Strings.oneSpaceAndTrim(path.$));
      for (k in listeners) {
        listener = listeners[k];
        if (typeof listener === "function") {
          listener(path.$, data);
        }
      }
      return this;
    };

    Listeners.prototype.remove = function(path) {
      this.listeners.remove(Strings.oneSpaceAndTrim(path));
      return this;
    };

    return Listeners;

  })();

  Xs.prototype.ls = Xs.prototype.list;

  Xs.prototype.find = Xs.prototype.search;

  Xs.Types = Words.Types;

  Xs.Strings = Words.Strings;

  Xs.Words = Words;

  if (typeof window !== "undefined" && window !== null) {
    window.Xs = Xs;
  } else if (typeof module !== "undefined" && module !== null) {
    module.exports = Xs;
  }

}).call(this);
